[tox]
# https://github.com/tox-dev/tox/issues/3238
requires = tox==4.14.0

# these are the default environments, i.e. the list of tests running when you execute
# `tox` in the command-line without anything else
envlist =
    lint
    core-tests
    operations-numpy-tests
    operations-torch-tests
    learn-numpy-tests
    learn-torch-tests
    torch-tests
    docs-tests


[testenv]
passenv = *
setenv =
    # Do not use the user PYTHONPATH, tox is handling everything
    PYTHONPATH=
    # store code coverage in a per-env file, so different envs don't override each other
    COVERAGE_FILE={env_dir}/.coverage

package = external
package_env = build-metatensor-core
lint_folders = "{toxinidir}/python" "{toxinidir}/setup.py"
build_single_wheel = --no-deps --no-build-isolation --check-build-dependencies

test_options =
    --cov={env_site_packages_dir}/metatensor \
    --cov-report= \
    --import-mode=append

packaging_deps =
    setuptools >=75
    setuptools-scm
    packaging >= 23
    cmake

testing_deps =
    pytest
    pytest-cov
    toml
    vesin


[testenv:build-metatensor-core]
# note: this is not redundant with the same value in the root [testenv] without this
# one, cmake can not find the MSVC compiler on Windows CI
passenv = *
setenv =
    # Do not use the user PYTHONPATH, tox is handling everything
    PYTHONPATH=

description =
    Used to only build the wheels which are then re-used by all other environments
    requiring metatensor to be installed
deps =
    {[testenv]packaging_deps}

commands =
    pip wheel python/metatensor_core {[testenv]build_single_wheel} --wheel-dir {envtmpdir}/dist


[testenv:core-tests]
description = Run the tests of the metatensor-core Python package
deps =
    numpy {env:METATENSOR_TESTS_NUMPY_VERSION_PIN}
    {[testenv]testing_deps}
    torch=={env:METATENSOR_TESTS_TORCH_VERSION:2.6.*}

changedir = python/metatensor_core
commands =
    pytest {[testenv]test_options} {posargs}

[testenv:operations-numpy-tests]
description =
    Run the tests of the metatensor-operations Python package using numpy arrays
deps =
    {[testenv]packaging_deps}
    {[testenv]testing_deps}
    numpy {env:METATENSOR_TESTS_NUMPY_VERSION_PIN}

changedir = python/metatensor_operations
commands =
    # metatensor-core is installed by tox
    # install metatensor-operations
    pip install . {[testenv]build_single_wheel} --force-reinstall

    # run the unit tests
    pytest {[testenv]test_options} {posargs}

[testenv:operations-torch-tests]
description =
    Run the tests of the metatensor-operations Python package using torch arrays
deps =
    {[testenv]packaging_deps}
    {[testenv]testing_deps}
    numpy {env:METATENSOR_TESTS_NUMPY_VERSION_PIN}
    torch=={env:METATENSOR_TESTS_TORCH_VERSION:2.6.*}

changedir = python/metatensor_operations
commands =
    # metatensor-core is installed by tox
    # install metatensor-operations
    pip install . {[testenv]build_single_wheel} --force-reinstall

    # run the unit tests
    pytest {[testenv]test_options} {posargs}


[testenv:learn-numpy-tests]
description =
    Run the tests of the metatensor-learn Python package using numpy arrays
deps =
    {[testenv]packaging_deps}
    {[testenv]testing_deps}
    numpy {env:METATENSOR_TESTS_NUMPY_VERSION_PIN}

changedir = python/metatensor_learn
commands =
    # metatensor-core is installed by tox
    # install metatensor-operations
    pip install ../metatensor_operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-learn
    pip install . {[testenv]build_single_wheel} --force-reinstall

    # run the unit tests
    pytest {[testenv]test_options} {posargs}

[testenv:learn-torch-tests]
description =
    Run the tests of the metatensor-learn Python package using torch arrays
deps =
    {[testenv]packaging_deps}
    {[testenv]testing_deps}
    torch=={env:METATENSOR_TESTS_TORCH_VERSION:2.6.*}
    numpy {env:METATENSOR_TESTS_NUMPY_VERSION_PIN}

    ; used for checking equivariance
    scipy
    sympy

changedir = python/metatensor_learn
commands =
    # metatensor-core is installed by tox
    # install metatensor-torch
    pip install ../metatensor_torch {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install ../metatensor_operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-learn
    pip install . {[testenv]build_single_wheel} --force-reinstall

    # run the unit tests
    pytest {[testenv]test_options} {posargs}

[testenv:torch-tests]
description = Run the tests of the metatensor-torch Python package
deps =
    {[testenv]packaging_deps}
    {[testenv]testing_deps}

    numpy {env:METATENSOR_TESTS_NUMPY_VERSION_PIN}
    torch=={env:METATENSOR_TESTS_TORCH_VERSION:2.6.*}
    ase

changedir = python/metatensor_torch
commands =
    # install metatensor-torch
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install ../metatensor_operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-learn
    pip install ../metatensor_learn {[testenv]build_single_wheel} --force-reinstall

    # use the reference LJ implementation for tests
    pip install {[testenv]build_single_wheel} git+https://github.com/metatensor/lj-test@daea42d

    # Make torch.autograd.gradcheck works with pytest
    python {toxinidir}/scripts/pytest-dont-rewrite-torch.py

    # run the unit tests
    pytest {[testenv]test_options} {posargs}


[testenv:docs-tests]
description = Run the doctests defined in any metatensor package
deps =
    {[testenv]packaging_deps}
    {[testenv]testing_deps}

    numpy {env:METATENSOR_TESTS_NUMPY_VERSION_PIN}
    torch=={env:METATENSOR_TESTS_TORCH_VERSION:2.6.*}
    ase

setenv =
    # ignore the fact that metatensor.torch.operations was loaded from a file
    # not in `metatensor/torch/operations`
    PY_IGNORE_IMPORTMISMATCH = 1

commands =
    # metatensor-core is installed by tox
    # install metatensor
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install python/metatensor_operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-learn
    pip install python/metatensor_learn {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-torch
    pip install python/metatensor_torch {[testenv]build_single_wheel} --force-reinstall

    # run documentation tests
    pytest --doctest-modules --pyargs metatensor


[testenv:lint]
description = Run linters and type checks
package = skip
deps =
    ruff

commands =
    ruff format --diff {[testenv]lint_folders}
    ruff check {[testenv]lint_folders}


[testenv:format]
description = Abuse tox to do actual formatting on all files.
package = skip
deps =
    ruff
commands =
    ruff format {[testenv]lint_folders}
    ruff check --fix-only {[testenv]lint_folders}

[testenv:docs]
description = build the documentation with sphinx
setenv =
    # build the docs against the CPU only version of torch
    PIP_EXTRA_INDEX_URL=https://download.pytorch.org/whl/cpu {env:PIP_EXTRA_INDEX_URL:}
deps =
    {[testenv]packaging_deps}
    {[testenv]testing_deps}

    sphinx == 7.4.*
    sphinx-toggleprompt # hide the prompt (>>>) in python doctests
    sphinx-gallery      # convert python files into nice documentation
    pygments            # syntax highligthing
    breathe             # C and C++ => sphinx through doxygen
    furo                # sphinx theme
    myst_parser         # include markdown documents in sphinx
    sphinx-design       # helpers for nicer docs website (tabs, grids, cards, â€¦)
    sphinxcontrib-details-directive # hide some information by default in HTML

    # required for autodoc
    numpy {env:METATENSOR_TESTS_NUMPY_VERSION_PIN}
    torch=={env:METATENSOR_TESTS_TORCH_VERSION:2.6.*}

    # required for examples
    ase
    chemiscope


allowlist_externals = bash
commands =
    # metatensor-core is installed by tox
    # install metatensor
    pip install . {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-operations
    pip install python/metatensor_operations {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-torch
    pip install python/metatensor_torch {[testenv]build_single_wheel} --force-reinstall
    # install metatensor-learn
    pip install python/metatensor_learn {[testenv]build_single_wheel} --force-reinstall

    sphinx-build -d docs/build/doctrees -W -b html docs/src docs/build/html

    bash -c "cargo rustdoc --package metatensor -- --html-before-content docs/src/core/reference/rust/backlink.html"
    bash -c "rm -rf docs/build/html/core/reference/rust/"
    bash -c "cp -r target/doc/ docs/build/html/core/reference/rust/"
    bash -c "cp docs/src/core/reference/rust/index.html docs/build/html/core/reference/rust/"


[testenv:build-tests]
description = Asserts Pythons package build integrity so one can build sdist and wheels
package = skip
deps =
    build
    twine  # a tool to check sdist and wheels metadata
    pip2pi # tool to create PyPI-like package indexes

allowlist_externals = bash
commands =
    python --version  # print the version of python used in this test

    bash ./scripts/build-all-wheels.sh {envtmpdir}

    twine check {envtmpdir}/dist/*.tar.gz
    twine check {envtmpdir}/dist/*.whl

    # check building wheels directly from the a checkout
    python -m build python/metatensor_core --wheel --outdir {envtmpdir}/dist
    python -m build python/metatensor_operations --wheel --outdir {envtmpdir}/dist
    python -m build python/metatensor_learn --wheel --outdir {envtmpdir}/dist
    python -m build python/metatensor_torch --wheel --outdir {envtmpdir}/dist
    python -m build .  --wheel --outdir {envtmpdir}/dist
